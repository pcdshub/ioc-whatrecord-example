name: whatrecord IOC Docs
run-name: docs
on:
  push:
  pull_request:
  release:
    types:
      - published

jobs:
  docs:
    runs-on: ubuntu-latest
    defaults:
      run:
        # The following allows for each run step to utilize ~/.bash_profile
        # for setting up the per-step initial state.
        # --login: a login shell. Source ~/.bash_profile
        # -o pipefail: piped processes are important; fail if they fail
        shell: bash --login -o pipefail {0}

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: 'recursive'

      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.10"
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: whatrecord-env
          use-mamba: true

      - name: Install whatrecord
        run: |
          mamba install gdb
          # python -m pip install whatrecord
          # There are some unreleased changes we use here, primarily relating
          # to offline JSON and the frontend:
          python -m pip install git+https://github.com/pcdshub/whatrecord@master
          # Optional extras:
          python -m pip install happi ophyd  # blark pytmc blark

      - name: Dump offline information from whatrecord
        run: |
          export HAPPI_CFG=${PWD}/support/happi/happi.cfg

          python -m whatrecord server \
            --gateway-config "./support/gateway" \
            --scripts iocBoot/ioc*/*.cmd \
            --dump-for-offline-usage support/docs/cache.json.gz \
            ;

      - name: Copy over the frontend pages
        run: |
          # TODO: frontend not distributed in whatrecord package yet; d'oh
          # WHATRECORD_PATH=$(python -c "import os, whatrecord; print(os.path.dirname(whatrecord.__file__));")

          mkdir -p .docs/dist
          cp -R support/whatrecord/frontend/* .docs/
          cp support/docs/docs_env .docs/.env

      - name: Install yarn to build the frontend pages
        run: |-
          curl -fsSL --create-dirs -o $HOME/bin/yarn \
          https://github.com/yarnpkg/yarn/releases/download/v1.22.19/yarn-1.22.19.js
          chmod +x $HOME/bin/yarn
          echo "$HOME/bin" >> $GITHUB_PATH

      - name: Yarn build
        run: |
          cd .docs
          yarn install
          REPO_NAME=$(basename ${{ github.repository }})
          CACHE_FN=${REPO_NAME}/cache.json.gz
          echo "Repo name: $REPO_NAME"
          echo "Cache filename name: $CACHE_FN"
          sed -i -e 's#^WHATRECORD_CACHE_FILE_URL.*=.*$#WHATRECORD_CACHE_FILE_URL=/'${CACHE_FN}'#' .env

          echo "Env settings:"
          cat .env
          yarn build "--base=/${REPO_NAME}" --minify=true
          # TODO note whatrecord router must be configured to be as such:
          #   history: VueRouter.createWebHashHistory(import.meta.env.BASE_URL),
          cp ../support/docs/cache.json.gz dist/
          touch dist/.nojekyll

      - name: Display structure of documentation
        run: ls -R
        working-directory: .docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: .docs/dist

  docs-deploy:
    needs: docs

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
